[
  {
    "lessonTitle": "Komponentlər və Props",
    "theory_questions": [
      { "question": "React'da Komponent nədir?", "answer": "Komponentlər, UI-ı müstəqil və təkrar istifadə edilə bilən hissələrə bölən JavaScript funksiyaları və ya sinifləridir. Hər bir komponent öz məntiqini və görünüşünü idarə edir." },
      { "question": "Funksional və Klass Komponentləri arasındakı fərq nədir?", "answer": "Klass komponentləri `React.Component`-dən törəyir və `state`, `lifecycle` metodları kimi xüsusiyyətlərə malikdir. Funksional komponentlər isə daha sadə JavaScript funksiyalarıdır və Hook-lar (`useState`, `useEffect`) vasitəsilə state və digər React xüsusiyyətlərindən istifadə edə bilirlər. Müasir React-da funksional komponentlərə üstünlük verilir." },
      { "question": "JSX nədir və niyə istifadə olunur?", "answer": "JSX (JavaScript XML), JavaScript daxilində HTML-ə bənzər sintaksis yazmağa imkan verən bir sintaksis genişlənməsidir. Bu, React elementlərinin yaradılmasını daha oxunaqlı və intuitiv edir." },
      { "question": "`props` nədir və necə işləyir?", "answer": "`props` (properties-in qısaltması), valideyn komponentdən övlad komponentə məlumat ötürmək üçün istifadə olunan bir obyektdir. Props-lar yalnız oxunaqlıdır (read-only), yəni övlad komponent onları dəyişə bilməz." },
      { "question": "`render()` metodu nə vaxt və harada istifadə olunur?", "answer": "`render()` metodu yalnız Klass Komponentlərində mövcuddur və komponentin UI-nı təmsil edən React elementlərini qaytarmaq üçün istifadə olunur. State və ya props dəyişdikdə `render()` metodu yenidən çağırılır." },
      { "question": "React-da bir neçə elementi necə qaytarmaq olar?", "answer": "Bir komponentdən bir neçə elementi qaytarmaq üçün onları bir əhatəedici elementin (məsələn, `<div>`) içinə yerləşdirmək və ya React Fragment (`<React.Fragment>` və ya qısa sintaksis `<>...</>`) istifadə etmək lazımdır." },
      { "question": "`key` prop-u nə üçün vacibdir?", "answer": "`key` prop-u, React-a bir siyahıdakı elementlərdən hansının dəyişdiyini, əlavə olunduğunu və ya silindiyini müəyyən etməyə kömək edən xüsusi bir sətir atributudur. `key`-lər eyni siyahıdakı elementlər arasında unikal olmalıdır." },
      { "question": "Props-ların ötürülməsi prosesini izah edin.", "answer": "Valideyn komponentdə, övlad komponenti çağırarkən atributlar kimi props-ları təyin edirsiniz (məsələn, `<User name='Ali' />`). Övlad komponent isə bu atributları özünün `props` obyektinin bir hissəsi olaraq qəbul edir." },
      { "question": "`defaultProps` nə üçün istifadə olunur?", "answer": "`defaultProps`, bir komponent üçün props-lara standart (default) dəyərlər təyin etmək üçün istifadə olunur. Əgər valideyn komponentdən heç bir prop ötürülməzsə, bu standart dəyərlər istifadə olunur." },
      { "question": "`PropTypes` kitabxanasının məqsədi nədir?", "answer": "`PropTypes`, komponentə ötürülən props-ların tiplərini yoxlamaq üçün istifadə olunur. Bu, tətbiqin sazlanması (debugging) zamanı səhvləri erkən aşkar etməyə kömək edir və komponentin düzgün istifadəsini təmin edir." }
    ],
    "practice_tasks": [
      { "title": "Salamlama Komponenti", "description": "'Greeting' adlı bir funksional komponent yaradın. Bu komponent `props` vasitəsilə bir `name` qəbul etsin və ekrana 'Salam, [ad]!' mətnini çıxarsın.", "solution": "import React from 'react';\n\nfunction Greeting({ name }) {\n  return <h1>Salam, {name}!</h1>;\n}\n\n// İstifadəsi:\n// <Greeting name=\"Ayan\" />" },
      { "title": "İstifadəçi Kartı Komponenti", "description": "'UserCard' adlı komponent yaradın. Bu komponent `props` olaraq `user` obyekti (`{ name, email, imageUrl }`) qəbul etsin və istifadəçinin şəklini, adını və e-poçtunu göstərən bir kart yaratsın.", "solution": "import React from 'react';\n\nfunction UserCard({ user }) {\n  return (\n    <div className=\"user-card\">\n      <img src={user.imageUrl} alt={user.name} />\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n    </div>\n  );\n}" },
      { "title": "Məhsul Siyahısı", "description": "Bir neçə məhsuldan ibarət olan bir massivi (`products` array) `map()` metodu ilə render edən 'ProductList' komponenti yaradın. Hər bir məhsul üçün `key` prop-u təyin etməyi unutmayın.", "solution": "import React from 'react';\n\nfunction ProductList({ products }) {\n  return (\n    <ul>\n      {products.map(product => (\n        <li key={product.id}>{product.name} - ${product.price}</li>\n      ))}\n    </ul>\n  );\n}" },
      { "title": "Komponentlərin Kompozisiyası", "description": "'App' komponenti daxilində əvvəl yaratdığınız 'Greeting' və 'UserCard' komponentlərini istifadə edin. Onlara fərqli props-lar ötürərək nəticəni yoxlayın.", "solution": "import React from 'react';\nimport Greeting from './Greeting';\nimport UserCard from './UserCard';\n\nfunction App() {\n  const sampleUser = { name: 'Vüsal', email: 'vusal@example.com', imageUrl: '...' };\n  return (\n    <div>\n      <Greeting name=\"Dünya\" />\n      <UserCard user={sampleUser} />\n    </div>\n  );\n}" },
      { "title": "Düymə Komponenti və `children`", "description": "'Button' adlı bir komponent yaradın. Bu komponentin mətnini `props` vasitəsilə deyil, `props.children` vasitəsilə qəbul edin. Bu, `<Button>Kliklə</Button>` kimi istifadəyə imkan verəcək.", "solution": "import React from 'react';\n\nfunction Button({ children }) {\n  return <button>{children}</button>;\n}\n\n// İstifadəsi:\n// <Button>Daha çox öyrən</Button>" }
    ]
  }
]
