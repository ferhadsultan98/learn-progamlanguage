[
  {
    "lessonTitle": "Modellər və ORM",
    "theory_questions": [
      { "question": "Django'da Model nədir və hansı məqsədlə istifadə olunur?", "answer": "Model, verilənlər bazasındakı bir cədvəli təmsil edən Python sinfidir. O, məlumatların strukturunu müəyyən edir və Django ORM (Object-Relational Mapper) vasitəsilə verilənlər bazası ilə əlaqə qurmağa imkan verir." },
      { "question": "CharField və TextField arasındakı əsas fərq nədir?", "answer": "Hər ikisi sətir məlumatları üçün olsa da, `CharField` kiçik və orta həcmli sətirlər üçün (məsələn, başlıq) nəzərdə tutulub və `max_length` tələb edir. `TextField` isə böyük həcmli mətnlər üçün (məqalə məzmunu) istifadə olunur və uzunluq limiti yoxdur." },
      { "question": "ForeignKey, ManyToManyField və OneToOneField əlaqələrini izah edin.", "answer": "ForeignKey: Çoxdan-birə əlaqə (bir çox şərh bir posta aid ola bilər). ManyToManyField: Çoxdan-çoxa əlaqə (bir çox tələbə bir çox kursa yazıla bilər). OneToOneField: Birdən-birə əlaqə (bir istifadəçinin yalnız bir profili ola bilər)." },
      { "question": "`makemigrations` və `migrate` əmrlərinin rolu nədir?", "answer": "`makemigrations` model fayllarınızdakı dəyişiklikləri oxuyur və onları verilənlər bazasına tətbiq etmək üçün təlimatlar (miqrasiya faylları) yaradır. `migrate` isə həmin təlimatları icra edərək verilənlər bazasının strukturunu yeniləyir." },
      { "question": "Django'da `__str__` metodu niyə bu qədər vacibdir?", "answer": "Bu metod bir obyektin insan tərəfindən oxunaqlı təsvirini qaytarır. Django admin panelində və ya obyektləri çap edərkən bu metodun nəticəsi göstərilir, bu da idarəetməni və sazlamanı (debugging) asanlaşdırır." },
      { "question": "`null=True` və `blank=True` parametrlərinin fərqini izah edin.", "answer": "`null=True` verilənlər bazası səviyyəsində sahənin boş (NULL) olmasına icazə verir. `blank=True` isə tətbiq səviyyəsində, yəni Django formalarında və admin panelində həmin sahənin boş buraxılmasına icazə verir." },
      { "question": "`auto_now` və `auto_now_add` parametrləri nə üçün istifadə olunur?", "answer": "Hər ikisi `DateTimeField` və `DateField` üçün istifadə olunur. `auto_now_add=True` obyekt ilk dəfə yaradıldıqda tarixi avtomatik təyin edir. `auto_now=True` isə obyekt hər dəfə yadda saxlanıldıqda (yeniləndikdə) tarixi avtomatik olaraq yeniləyir." },
      { "question": "Django ORM-də `filter()` və `get()` metodları arasındakı fərq nədir?", "answer": "`filter()` şərtə uyan bütün obyektləri ehtiva edən bir QuerySet qaytarır (hətta heç bir obyekt tapmasa da). `get()` isə yalnız və yalnız bir obyektin tapılacağını gözləyir. Əgər heç bir və ya birdən çox obyekt tapsa, xəta (DoesNotExist və ya MultipleObjectsReturned) verir." },
      { "question": "Bir modelin daxilindəki `Meta` classı hansı məqsədlərə xidmət edir?", "answer": "`Meta` classı modelin özü haqqında konfiqurasiyaları saxlamaq üçün istifadə olunur. Məsələn, verilənlər bazası cədvəlinin adını (`db_table`), obyektlərin standart sıralamasını (`ordering`), unikal məhdudiyyətləri (`unique_together`) və s. təyin etmək olar." },
      { "question": "QuerySet nədir və o, 'ləng' (lazy) hesab olunur?", "answer": "QuerySet, verilənlər bazasından bir sıra obyektləri təmsil edən bir kolleksiyadır. Bəli, o 'ləng'dir, çünki QuerySet yaradılması verilənlər bazasına heç bir sorğu göndərmir. Sorğu yalnız QuerySet-dən məlumatları istifadə etməyə çalışdığınız zaman (məsələn, dövrə saldıqda, çap etdikdə) icra olunur." }
    ],
    "practice_tasks": [
      { "title": "Məhsul və Kateqoriya Modelləri", "description": "'Category' və 'Product' adlı iki model yaradın. 'Product' modeli 'Category' ilə 'ForeignKey' vasitəsilə əlaqəli olmalıdır. Hər iki modelə mənalı sahələr əlavə edin (məs. ad, təsvir, qiymət, yaradılma tarixi).", "solution": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    created_at = models.DateTimeField(auto_now_add=True)" },
      { "title": "Yazar və Məqalə Modelləri", "description": "'Author' və 'Article' modellərini yaradın. Bir məqalənin bir neçə müəllifi ola biləcəyini nəzərə alaraq, onlar arasında `ManyToManyField` əlaqəsi qurun.", "solution": "from django.db import models\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Article(models.Model):\n    authors = models.ManyToManyField(Author)\n    title = models.CharField(max_length=255)\n    content = models.TextField()" },
      { "title": "İstifadəçi Profili Modeli", "description": "Django-nun daxili `User` modeli ilə birdən-birə (`OneToOneField`) əlaqəsi olan bir `UserProfile` modeli yaradın. Profilə `bio` (TextField) və `profile_picture` (ImageField) kimi sahələr əlavə edin.", "solution": "from django.contrib.auth.models import User\nfrom django.db import models\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    bio = models.TextField(blank=True)\n    profile_picture = models.ImageField(upload_to='profile_pics/', blank=True)" },
      { "title": "`Meta` Class ilə Sıralama", "description": "'Product' modelinin obyektlərinin standart olaraq qiymətə görə artan sırada (`price`) sıralanmasını təmin etmək üçün `Meta` classından istifadə edin.", "solution": "class Product(models.Model):\n    # ... digər sahələr ...\n\n    class Meta:\n        ordering = ['price']" },
      { "title": "ORM Sorğusu Yazın", "description": "Qiyməti 100-dən yuxarı olan və adında 'smartfon' sözü olan bütün məhsulları tapan bir Django ORM sorğusu yazın.", "solution": "from .models import Product\n\nhigh_end_smartphones = Product.objects.filter(\n    price__gt=100,\n    name__icontains='smartfon'\n)" }
    ]
  }
]
